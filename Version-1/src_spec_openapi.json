{
  "openapi": "3.0.3",
  "info": {
    "title": "OAuth2 ACG+PKCE API",
    "description": "OAuth2 server API for Authorization Code Grant (ACG) with Proof Key for Code Exchange (PKCE)",
    "contact": {
      "email": "j.hernandez@upc.edu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local testing server"
    },
    {
      "url": "https://oauth2.i3market.eu",
      "description": "Production server"
    }
  ],
  "paths": {
    "/authorize": {
      "get": {
        "summary": "request authorization code",
        "operationId": "authorizationCode",
        "parameters": [
          {
            "name": "response_type",
            "in": "query",
            "description": "With the response_type, the client informs the authorization server of the desired grant type",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "code"
              ]
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "the id of a previously registered OAuth2 client",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "The location to redirect to after auth. This must be one of the registered redirect URLs.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "A space-separated list of identity claims to request from the end-user.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "An opaque value used by the client to maintain state between the request and callback. The authorization server includes this value when redirecting the user-agent back to the client.  The parameter SHOULD be used for preventing cross-site request forgery",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code_challenge",
            "in": "query",
            "description": "A code challenge derived from the code verifier by using one of the following transformations described in the code_challenge_method.\n\nIt is RECOMMENDED that the output of a suitable random number generator be used to create a 32-octet sequence. The octet sequence is then base64url-encoded to produce a 43-octet URL safe string to use as the code verifier.\n\nExample code (node.js):\n```javascript\nconst base64url = require(\"base64url\")\nconst crypto = require('crypto')\nconst codeVerifierBuf = crypto.randomBytes(32)\nconst codeVerifier = base64url.encode(codeVerifierBuf)\nconsole.log(codeVerifier)\nconst hash = crypto.createHash('sha256')\n            .update(codeVerifier)\n            .digest();\nconst codeChallenge = base64url.encode(hash)\nconsole.log(codeChallenge)\n```\n",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 128,
              "minLength": 43,
              "pattern": "^[A-Za-z0-9\\-._~]{43,128}$",
              "type": "string"
            },
            "example": "FL_DFs6V30KSJAIq7h_LsAttGYAplaYGdFUkGeN54EE"
          },
          {
            "name": "code_challenge_method",
            "in": "query",
            "description": "- 'plain' code_challenge = code_verifier\n- 'S256' code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))\n",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "plain",
              "enum": [
                "S256",
                "plain"
              ]
            }
          }
        ],
        "responses": {
          "302": {
            "description": "redirect to callback_uri with code or error",
            "headers": {
              "Location": {
                "description": "either an AuthorizationResponseRedirect or an AuthorizationErrorRedirect (look at the schemas for more details)",
                "style": "simple",
                "explode": false,
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AuthorizationResponseRedirect"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizationErrorRedirect"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "missing, invalid, or mismatching redirection URI; missing or invalid client identifier."
          }
        }
      }
    },
    "/token": {
      "post": {
        "summary": "The token endpoint is used by the native app or spa to obtain an access token by presenting its authorization grant and code verifier.",
        "operationId": "accessToken",
        "requestBody": {
          "description": "The authorization grant and the code verifier",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenSuccessfulResponse"
                }
              }
            }
          },
          "400": {
            "description": "missing or invalid mandatory parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "client authentication failed",
            "headers": {
              "WWW-Authenticate": {
                "description": "If the client attempted to authenticate via the \"Authorization\" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.",
                "style": "simple",
                "explode": false,
                "schema": {
                  "type": "string"
                },
                "example": "basic"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthorizationResponseRedirect": {
        "type": "string",
        "description": "If the resource owner grants the access request, the authorization server issues an authorization code and delivers it to the client by adding the following parameters to the query component of the redirection URI using the \"application/x-www-form-urlencoded\" format:\n- `code` REQUIRED. The authorization code generated by the authorization server.  The authorization code MUST expire shortly after it is issued to mitigate the risk of leaks. A maximum authorization code lifetime of 10 minutes is RECOMMENDED. The client MUST NOT use the authorization code.\n- `state` REQUIRED if the `state` parameter was present in the client authorization request.  The exact value received from the client.\n",
        "format": "uri",
        "example": "HTTP/1.1 302 Found\nLocation: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=xyz\n"
      },
      "AuthorizationErrorRedirect": {
        "type": "string",
        "description": "If the request fails due to a missing, invalid, or mismatching redirection URI, or if the client identifier is missing or invalid, the authorization server SHOULD inform the resource owner of the error and MUST NOT automatically redirect the user-agent to the invalid redirection URI.\nIf the resource owner denies the access request or if the request fails for reasons other than a missing or invalid redirection URI, the authorization server informs the client by adding the following parameters to the query component of the redirection URI using the \"application/x-www-form-urlencoded\" format, per Appendix B:\n- `error` REQUIRED. A single ASCII [USASCII] error code from the following:\n  - `invalid_request` The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed. This code will be generated e.g. if the he client has not sent the `code_challenge`.\n  - `unauthorized_client` The client is not authorized to request an authorization code using this method.\n  - `access_denied` The resource owner or authorization server denied the request.\n  - `unsupported_response_type` The authorization server does not support obtaining an authorization code using this method.\n  - `invalid_scope` The requested scope is invalid, unknown, or malformed.\n  - `server_error` The authorization server encountered an unexpected condition that prevented it from fulfilling the request. (This error code is needed because a 500 Internal Server Error HTTP status code cannot be returned to the client via an HTTP redirect.)\n  - `temporarily_unavailable` The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.  (This error code is needed because a 503 Service Unavailable HTTP status code cannot be returned to the client via an HTTP redirect.)\n- `error_description` OPTIONAL. Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred.\n- `error_uri` OPTIONAL. A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.\n",
        "format": "uri",
        "example": "HTTP/1.1 302 Found\nLocation: https://client.example.com/cb?error=access_denied&state=xyz\n"
      },
      "AccessTokenRequest": {
        "required": [
          "client_id",
          "code",
          "code_verifier",
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Value MUST be set to `authorization_code`",
            "example": "authorization_code",
            "enum": [
              "authorization_code"
            ]
          },
          "code": {
            "pattern": "^[A-Za-z0-9\\-._~]{43,128}$",
            "type": "string",
            "description": "The authorization code received from the authorization server",
            "example": "FL_DFs6V30KSJAIq7h_LsAttGYAplaYGdFUkGeN54EE"
          },
          "redirect_uri": {
            "type": "string",
            "description": "REQUIRED, if the `redirect_uri` parameter was included in the authorization request and their values MUST be identical.",
            "format": "uri",
            "example": "https://api.server.com/callback"
          },
          "client_id": {
            "type": "string",
            "description": "the registered client id"
          },
          "code_verifier": {
            "maxLength": 128,
            "minLength": 43,
            "pattern": "^[A-Za-z0-9\\-._~]{43,128}$",
            "type": "string",
            "description": "high-entropy cryptographic random STRING using the unreserved characters [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\" from Section 2.3 of [RFC3986], with a minimum length of 43 characters and a maximum length of 128 characters.",
            "example": "EbWPr9dknKvBDg8r8zRroG82bFZaSqSWeCKjvj_AI1w"
          }
        }
      },
      "AccessTokenSuccessfulResponse": {
        "required": [
          "access_token",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The access token issued by the authorization server"
          },
          "token_type": {
            "type": "string",
            "description": "The type of the token issued. Value is case insensitive. The access token type provides the client with the information required to successfully utilize the access token to make a protected resource request (along with type-specific attributes).  The client MUST NOT use an access token if it does not understand the token type.",
            "example": "bearer"
          },
          "expires_in": {
            "minimum": 1,
            "type": "integer",
            "description": "The lifetime in seconds of the access token.  For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.",
            "example": 60
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token, which can be used to obtain new access tokens using the same authorization grant"
          },
          "scope": {
            "type": "string",
            "description": "The scope of the access token. OPTIONAL, if identical to the scope requested by the client; otherwise, REQUIRED."
          }
        }
      },
      "AccessTokenErrorResponse": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "A single ASCII [USASCII] error code from the following:\n- `invalid_request` The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed.\n- `invalid_client` Client authentication failed (e.g., unknown client, no client authentication included, or unsupported authentication method).  The authorization server MAY return an HTTP 401 (Unauthorized) status code to indicate which HTTP authentication schemes are supported.  If the client attempted to authenticate via the \"Authorization\" request header field, the authorization server MUST respond with an HTTP 401 (Unauthorized) status code and include the \"WWW-Authenticate\" response header field matching the authentication scheme used by the client.\n- `invalid_grant` The provided authorization grant (e.g., authorization code, resource owner credentials) or refresh token is invalid, expired, revoked, does not match the redirection URI used in the authorization request, or was issued to another client.\n- `unauthorized_client` The authenticated client is not authorized to use this authorization grant type.\n- `unsupported_grant_type` The authorization grant type is not supported by the authorization server.\n- `invalid_scope` The requested scope is invalid, unknown, malformed, or exceeds the scope granted by the resource owner.\n",
            "enum": [
              "invalid_request",
              "invalid_client",
              "invalid_grant",
              "unaothorized_client",
              "unsupported_grant_type",
              "invalid_scope"
            ]
          },
          "error_description": {
            "type": "string",
            "description": "Human-readable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding the error that occurred."
          },
          "error_uri": {
            "type": "string",
            "description": "A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.",
            "format": "uri"
          }
        }
      }
    }
  }
}